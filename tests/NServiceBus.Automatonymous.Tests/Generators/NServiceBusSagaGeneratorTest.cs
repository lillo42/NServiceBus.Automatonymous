using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using Xunit;

namespace NServiceBus.Automatonymous.Tests.Generators;

public class NServiceBusSagaGeneratorTest : BaseTest
{
    
    [Fact]
    public async Task IAmStartedByMessagesOnly()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class StartBy : IMessage
{
    public Guid OrderId { get; set; }
}
    
public class StartByState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}
    
public sealed class StartByMachine : NServiceBusStateMachine<StartByState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        Initially(When(StartBy)
            .Then(context =>
            {
                var log = context.GetPayload<ILog>();
                log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
                log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
            }));
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;

    public State OrderStarted { get; private set; } = null!;
    public Event<StartBy> StartBy { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class StartByMachineNServiceBusSaga : NServiceBusSaga<StartByMachine, StartByState>, IAmStartedByMessages<StartBy>
{

    public StartByMachineNServiceBusSaga(StartByMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(StartBy message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.StartBy);
}
");
    }
    
    [Fact]
    public async Task IAmStartedByMessagesOnly_With_This()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class StartBy : IMessage
{
    public Guid OrderId { get; set; }
}

public class StartByState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class StartByMachine : NServiceBusStateMachine<StartByState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        Initially(When(this.StartBy)
            .Then(context =>
            {
                var log = context.GetPayload<ILog>();
                log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
                log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
            }));
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;

    public State OrderStarted { get; private set; } = null!;
    public Event<StartBy> StartBy { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class StartByMachineNServiceBusSaga : NServiceBusSaga<StartByMachine, StartByState>, IAmStartedByMessages<StartBy>
{

    public StartByMachineNServiceBusSaga(StartByMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(StartBy message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.StartBy);
}
");
    }
    
    [Fact]
    public async Task IHandleMessagesOnly()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class SubmitOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class OrderState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class OrderMachine : NServiceBusStateMachine<OrderState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        When(SubmitOrder)
            .Then(context =>
            {
                var log = context.GetPayload<ILog>();
                log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
                log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
            });
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;

    public State OrderStarted { get; private set; } = null!;
    public Event<SubmitOrder> SubmitOrder { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class OrderMachineNServiceBusSaga : NServiceBusSaga<OrderMachine, OrderState>, IHandleMessages<SubmitOrder>
{

    public OrderMachineNServiceBusSaga(OrderMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(SubmitOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.SubmitOrder);
}
");
    }
    
    
    [Fact]
    public async Task IHandleMessagesOnly_With_This()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class SubmitOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class OrderState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class OrderMachine : NServiceBusStateMachine<OrderState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        When(this.SubmitOrder)
            .Then(context =>
            {
                var log = context.GetPayload<ILog>();
                log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
                log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
            });
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;

    public State OrderStarted { get; private set; } = null!;
    public Event<SubmitOrder> SubmitOrder { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class OrderMachineNServiceBusSaga : NServiceBusSaga<OrderMachine, OrderState>, IHandleMessages<SubmitOrder>
{

    public OrderMachineNServiceBusSaga(OrderMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(SubmitOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.SubmitOrder);
}
");
    }
    
    
    [Fact]
    public async Task IHandleTimeouts_With_ObjectCreationLambda()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class CancelOrder : IMessage { }

public class StartOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class OrderState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class OrderStateMachine : NServiceBusStateMachine<OrderState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        Initially(When(SubmitOrder)
            .RequestTimeout(_ => new CancelOrder(), DateTime.UtcNow.AddSeconds(30)));
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;
    protected override string DefaultCorrelationMessageByPropertyName => ""OrderId"";

    public State OrderStarted { get; private set; } = null!;
    
    public Event<StartOrder> SubmitOrder { get; private set; } = null!;
    
    public Event<CancelOrder> CancelOrder { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class OrderStateMachineNServiceBusSaga : NServiceBusSaga<OrderStateMachine, OrderState>, IAmStartedByMessages<StartOrder>, IHandleTimeouts<CancelOrder>
{

    public OrderStateMachineNServiceBusSaga(OrderStateMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(StartOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.SubmitOrder);

    public Task Timeout(CancelOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.CancelOrder);
}
");
    }
    
    [Fact]
    public async Task IHandleTimeouts_With_SimpleLambda()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class CancelOrder : IMessage { }

public class StartOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class OrderState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class OrderStateMachine : NServiceBusStateMachine<OrderState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        Initially(When(SubmitOrder)
            .RequestTimeout(_ => 
            {
                var message = new CancelOrder();
                return message;
            }, DateTime.UtcNow.AddSeconds(30)));
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;
    protected override string DefaultCorrelationMessageByPropertyName => ""OrderId"";

    public State OrderStarted { get; private set; } = null!;
    
    public Event<StartOrder> SubmitOrder { get; private set; } = null!;
    
    public Event<CancelOrder> CancelOrder { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class OrderStateMachineNServiceBusSaga : NServiceBusSaga<OrderStateMachine, OrderState>, IAmStartedByMessages<StartOrder>, IHandleTimeouts<CancelOrder>
{

    public OrderStateMachineNServiceBusSaga(OrderStateMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(StartOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.SubmitOrder);

    public Task Timeout(CancelOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.CancelOrder);
}
");
    }
    
    [Fact]
    public async Task GenerateSimpleSaga()
    {
        var driver = await GenerateMapperAsync(@"
using System;
using System.Linq.Expressions;
using Automatonymous;
using GreenPipes;
using NServiceBus.Logging;

namespace NServiceBus.Automatonymous.Tests;

public class CancelOrder : IMessage { }

public class CompleteOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class StartOrder : IMessage
{
    public Guid OrderId { get; set; }
}

public class OrderState : ContainSagaData
{
    public string CurrentState { get; set; }
    public Guid OrderId { get; set; }
}

public sealed class OrderStateMachine : NServiceBusStateMachine<OrderState>
{
    public OrderStateMachine()
    {
        InstanceState(x => x.CurrentState);

        Initially(When(this.SubmitOrder)
            .Then(context =>
            {
                var log = context.GetPayload<ILog>();
                log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
                log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
            })
            .SendAsync(context => new CompleteOrder { OrderId = context.Instance.Id },
                (_, opt) =>
                {
                    opt.DelayDeliveryWith(TimeSpan.FromSeconds(10));
                    opt.RouteToThisEndpoint();
                })
            .Then(context => context.GetPayload<ILog>().Info(@""Requesting a CancelOrder that will be executed in 30 seconds.""))
            .RequestTimeout(_ => new CancelOrder(), DateTime.UtcNow.AddSeconds(30))
            .TransitionTo(OrderStarted));
        
        During(OrderStarted, When(CompleteOrder)
            .Then(context => context.GetPayload<ILog>().Info($""CompleteOrder received with OrderId {context.Data.OrderId}""))
            .Finalize());
        
        DuringAny(When(CancelOrder)
            .Then(context => context.GetPayload<ILog>().Info($""CompleteOrder not received soon enough OrderId {context.Instance.OrderId}. Calling MarkAsComplete""))
            .Finalize());
    }

    public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;
    protected override string DefaultCorrelationMessageByPropertyName => ""OrderId"";

    public State OrderStarted { get; private set; } = null!;
    
    public Event<StartOrder> SubmitOrder { get; private set; } = null!;
    
    public Event<CancelOrder> CancelOrder { get; private set; } = null!;
    
    public Event<CompleteOrder> CompleteOrder { get; private set; } = null!;
}
");

        var result = driver.GetRunResult();
        result.Diagnostics.Should().BeEmpty();
        result.GeneratedTrees.Should().NotBeEmpty();
        result.GeneratedTrees.Should().ContainSingle();
        var generated = result.GeneratedTrees.Single();
        generated.ToString().Should().Be(@"/// <auto-generated>
///     Code generated by NServiceBus.Automatonymous
/// </auto-generated>

using System.Threading.Tasks;
using NServiceBus;
using NServiceBus.Automatonymous;
using NServiceBus.ObjectBuilder;
using NServiceBus.Automatonymous.Tests;

namespace NServiceBus.Automatonymous.Generated;

public partial class OrderStateMachineNServiceBusSaga : NServiceBusSaga<OrderStateMachine, OrderState>, IAmStartedByMessages<StartOrder>, IHandleTimeouts<CancelOrder>, IHandleMessages<CompleteOrder>, IHandleMessages<CancelOrder>
{

    public OrderStateMachineNServiceBusSaga(OrderStateMachine stateMachine, IBuilder builder)
        : base(stateMachine, builder)
    {
        
    }
    

    public Task Handle(StartOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.SubmitOrder);

    public Task Timeout(CancelOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.CancelOrder);

    public Task Handle(CompleteOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.CompleteOrder);

    public Task Handle(CancelOrder message, IMessageHandlerContext context)
        => Execute(message, context, StateMachine.CancelOrder);
}
");
    }

//     [Fact]
//     public async Task GenerateSagaWithScheduler()
//     {
//         var driver = await GenerateMapperAsync(@"
// using System;
// using System.Linq.Expressions;
// using Automatonymous;
// using GreenPipes;
// using NServiceBus;
// using NServiceBus.Automatonymous;
// using NServiceBus.Logging;
//
// namespace SimpleStateMachine
// {
//     public sealed class OrderStateMachine : NServiceBusStateMachine<OrderState>
//     {
//         public OrderStateMachine()
//         {
//             InstanceState(x => x.CurrentState);
//
//             Event(() => CompleteOrder);
//
//             Schedule(() => CancelOrder, state => state.CancelOrderId);
//
//             Initially(When(SubmitOrder)
//                 .Then(context =>
//                 {
//                     var log = context.GetPayload<ILog>();
//                     log.Info($""StartOrder received with OrderId {context.Data.OrderId}"");
//                     log.Info(""Sending a CompleteOrder that will be delayed by 10 seconds"");
//                 })
//                 .Send(context => new CompleteOrder { OrderId = context.Instance.OrderId },
//                     (_, opt) =>
//                     {
//                         opt.DelayDeliveryWith(TimeSpan.FromSeconds(10));
//                         opt.RouteToThisEndpoint();
//                     })
//                 .Then(context => context.GetPayload<ILog>().Info(@""Requesting a CancelOrder that will be executed in 30 seconds.""))
//                 .Schedule(CancelOrder,_ => new CancelOrder(), DateTime.UtcNow.AddSeconds(30))
//                 .TransitionTo(OrderStarted));
//             
//             During(OrderStarted, When(CompleteOrder)
//                 .Then(context => context.GetPayload<ILog>().Info($""CompleteOrder received with OrderId {context.Data.OrderId}""))
//                 .Finalize());
//             
//             DuringAny(When(CancelOrder.Received)
//                 .Then(context => context.GetPayload<ILog>().Info($""CompleteOrder not received soon enough OrderId {context.Instance.OrderId}. Calling MarkAsComplete""))
//                 .Finalize());
//         }
//
//         public override Expression<Func<OrderState, object>> CorrelationByProperty() => x => x.OrderId;
//         protected override string DefaultCorrelationMessageByPropertyName => ""OrderId"";
//         
//         public State OrderStarted { get; private set; } = null!;
//         
//         [StartStateMachine]
//         public Event<StartOrder> SubmitOrder { get; private set; } = null!;
//         
//         public Schedule<OrderState, CancelOrder> CancelOrder { get; private set; } = null!;
//         
//         public Event<CompleteOrder> CompleteOrder { get; private set; } = null!;
//     }
//
//     public class OrderState : ContainSagaData
//     {
//         public string CurrentState { get; set; }
//         public Guid OrderId { get; set; }
//     }
//
//     public class CancelOrder : IMessage { }
//     public class CompleteOrder : IMessage
//     {
//         public Guid OrderId { get; set; }
//     }
//
//     public class StartOrder : IMessage
//     {
//         public Guid OrderId { get; set; }
//     }
// }
// ");
//
//         var result = driver.GetRunResult();
//         result.Diagnostics.Should().BeEmpty();
//         result.GeneratedTrees.Should().NotBeEmpty();
//         result.GeneratedTrees.Should().ContainSingle();
//         var generated = result.GeneratedTrees.Single();
//         generated.ToString().Should().Be(@"// <auto-generated />
// using System.Threading.Tasks;
// using NServiceBus.Automatonymous;
// using NServiceBus.ObjectBuilder;
// using SimpleStateMachine;
// using NServiceBus;
//
// namespace NServiceBus.Automatonymous.Generated
// {
//     public class OrderStateMachineNServiceBusSaga : NServiceBusSaga<OrderStateMachine, OrderState>, IAmStartedByMessages<StartOrder>,
//     IHandleMessages<CompleteOrder>,
//     IHandleMessages<CancelOrder>
//     {
//         public OrderStateMachineNServiceBusSaga(OrderStateMachine stateMachine, IBuilder builder)
//           : base(stateMachine, builder)
//         {
//         }
//         public Task Handle(StartOrder message, IMessageHandlerContext context)
//         {
//             return Execute(message, context, StateMachine.SubmitOrder);
//         }
//         public Task Handle(CompleteOrder message, IMessageHandlerContext context)
//         {
//             return Execute(message, context, StateMachine.CompleteOrder);
//         }
//         public Task Handle(CancelOrder message, IMessageHandlerContext context)
//         {
//             return Execute(message, context, StateMachine.CancelOrder.AnyReceived);
//         }
//     }
// }
// ");
    // }
}